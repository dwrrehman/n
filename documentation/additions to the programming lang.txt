we need a "safe" keyword and a "unsafe" keyword.

functions are safe by default, unless the compiler figures out that our program derefernces a pointer, or calls another unsafe function.












what about type aliases?


in order to do type aliases, i think that we should treat types as expressions, possible, (aka, type expressions)


and simply turn:

	typedef std::vector<std::string> mylist

into:

	mylist = {vector string}














todo:

allow for nested comments! this is important.
















eventually i want to write an editor for my lang, to allow for syntax highlighting, 
or at least allow some editor to support it.

making a lang doesnt mean you will be able to sudddenly start using it.
there are alot of tools that need to be in place as well to be able to develop effectively using a language.














also we can generate documentation for code, using special comments:



recall that the usual comments are:



	print "hi" 	;; this is a comment.


and:

	;:  this is a 
		multiline comment  :;



well, there are variants of these, which are special comments, which allow for documentation gen.


	;::   this is a special docgen 
		 	multiline comment.  ::;

	;;: this is a special docgen inline comment. 




but theres other ones too!

	;:{ text }:;         insert raw code.

	;:/ text /:;         insert raw HTML.

	;;; text             single line command comment. (todo, fix, issue, note, jot, question, concern)

	;:" text ":;         raw text.

	;:( text ):;         

	;:[ text ]:;




im progbably goingt o revise this a ton. so dont think its set in stone.























