:: use of types in this language:


:: NOTE: this is outdated.


:: interface:


` 
	a vector type, which just wraps a C style pointer/array. 
		calls C library functions under the hood. 
`

{vector T} [T] {                               :: everything here must be public.
	(self * capacity: num) constructor
	(self . push x: T)
	(self [index: num]) 
	(self) destructor
}



:: implementation:


{vector T} [T] {

	.data: ~*~T = null
	.count:~ = 0
	.capacity:~ = 0
	
	(self * capacity: num) public constructor {                
		.data = C.malloc(|T| * capacity)
		.count = 0
		.capacity = capacity

		:: note: C library functions all take a tuple, 
		:: containing the parameters for the C function.
	}
	
	(self . push x: T) public {        
		:: the dot is optional to have in a def. its just signature sugar. 
		:: you need need self, though.

		.data = C.realloc(.data, |T| * (.count + 1))
		.data[.count] = x
		.count += 1
		.capacity += 1
	}

	(self [index]) public inline compiletime {
		return .data[index]
	}

	(self) public destructor {
		C.free(.data)
	}
}




:: the compiler will generate a series of functions, which are able to be called, (they are technically "kinds", acftually)

:: and when you declare a type, you are technucally calling a kind? no..... hmm..





(main) {
	:: see note 1.
	v: vector = [1,2,3,4]          :: type infered to be "{vector int}"
	
	v.push 5

	using .io
	print v[0]            :: "1\n"	

	:: v goes out of scope, and gets destructed.
}



:: note 1: 
/: 
	the left hand side is actually a vector initializer list, 
	which is being assigned (via copy construction,) to the values of v.
       note. its silly to initialize soemthign with a IL AND also call the "* capacity" ctor. 
:/





